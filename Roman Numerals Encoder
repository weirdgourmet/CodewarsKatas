/*
Create a function taking a positive integer as its parameter and returning a string containing the Roman Numeral representation of that integer.

Modern Roman numerals are written by expressing each digit separately starting with the left most digit and skipping any digit with a value of zero. In Roman numerals 1990 is rendered: 1000=M, 900=CM, 90=XC; resulting in MCMXC. 2008 is written as 2000=MM, 8=VIII; or MMVIII. 1666 uses each Roman symbol in descending order: MDCLXVI.

Example:

conversion.solution(1000); //should return "M"

Help:

Symbol    Value
I          1
V          5
X          10
L          50
C          100
D          500
M          1,000

Remember that there can't be more than 3 identical symbols in a row.

More about roman numerals - http://en.wikipedia.org/wiki/Roman_numerals

*/

import java.util.*;
import java.lang.*;

public class Conversion {
  HashMap<Integer,String>map=new HashMap<Integer,String>();
    public void Initialise()
    {
      map.put(1,"I");
      map.put(5,"V");
      map.put(10,"X");
      map.put(50,"L");
      map.put(100,"C");
      map.put(500,"D");
      map.put(1000,"M");
    }
    public String solution(int n) {
        Initialise();
        String result="";
        int len=Integer.toString(n).length();
         System.out.println(n);
        for( int i = len-1 ; i >= 0 ; i-- )
        { 
        int temp=(int)(n/Math.pow(10,i));
        result+=roman(temp,i);
         System.out.println("PARTIAL RESULT : "+result);
        n=(int)(n%Math.pow(10,i));
        }
        return result;
    }
    public String roman(int n,int i){
    System.out.println(" NUM : "+ n +"  i : "+i);
    if(n==0)
    {
      return "";
    }
      if(n<=3)
      {
        int index=(int)Math.pow(10,i);
        return map.get(index).repeat(n);
      }
      else if(n==4)
      {
        int index2= (int) (5*Math.pow(10,i));
        int index1= (int) Math.pow(10,i);
        return map.get(index1)+map.get(index2);
      }
      else if(n==5)
      {
        int index=(int)Math.pow(10,i);
        return map.get(index*n);
      }
      else if(n<=8)
      {
        int index=(int)Math.pow(10,i);
        return map.get(index*5) + roman(n-5,i);
      }
      else
      {
        int index=(int)Math.pow(10,i);
        int index1=(int)Math.pow(10,i+1);
        return map.get(index)+map.get(index1);
      }
    }
}
